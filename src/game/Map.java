package game;

import java.awt.Graphics;

public class Map {
	private Wall wall;
	private GameInterface gi;
	private int x_ = 22,y_ = 22;
	public int map[][] = 
		{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //1
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //2
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0},   //3
		{0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0},   //4
		{0,0,1,1,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0},   //5
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0},   //6
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0},   //7
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0},   //8
		{0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},   //9
		{0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},   //10
		{0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0},   //11
		{0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0},   //12
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},   //13
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},   //14
		{0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0},   //15
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},   //16
		{0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},   //17
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0},   //18
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0},   //19
		{0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0},   //20
		{0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},   //21
		{0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0},   //22
		};

	public Map(GameInterface gi)
	{
		this.gi = gi;
		wall = new Wall(gi);
	}
	
	public boolean IsWall(int x,int y)             //判断当前坐标有没有墙 返回false为存在墙
	{
//		System.out.println("fsggs");
		int i,j;
		
		int x_mod = x % this.wall.GetWall_width();
		if(x != 0 && x_mod == 0)
		{
			x-=1;
		}
		j = x / wall.GetWall_width();
		if(y != 0 && y % wall.GetWall_width() == 0)
		{
			y-=1;
		}
		i = y / wall.GetWall_width();
//		System.out.println("map["+i+"]["+j+"] = "+map[i][j]);
		if(map[i][j] == 1)
		{
			return false;
		}
		
		else 
			return true;
	}
	public void SetMap(int i,int j)
	{
		map[i][j] --;
	}
	public void DrawMap(Graphics g)
	{
		for(int i  = 0;i < x_;i++)
		{
			for(int j = 0;j < y_;j++)
			{
				if(map[i][j] == 1)
				wall.DrawWall(g, j, i);
			}
		}
	}
}
